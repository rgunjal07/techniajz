pipeline {
    agent any

    environment {
        DOCKER_HUB_USER = "rgunjal"
        IMAGE_NAME = "myjenkins-blueocean:2.414.2"
        IMAGE_TAG = "5ba9b9a5dcce" // or use "${env.BUILD_NUMBER}" for unique build tags
    }

    options {
        timestamps()
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }

    stages {

        stage('Checkout') {
            steps {
                echo "üì¶ Checking out source code..."
                git branch: 'master', url: 'https://github.com/rgunjal07/techniajz.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo "üê≥ Building Docker image..."
                    docker.build("${DOCKER_HUB_USER}/${IMAGE_NAME}:${IMAGE_TAG}")
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                echo "üì¶ Installing project dependencies..."
                sh 'npm install'
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    echo "üß™ Running tests..."
                    docker.image("${DOCKER_HUB_USER}/${IMAGE_NAME}:${IMAGE_TAG}").inside {
                        sh 'npm test'
                    }
                }
            }
            post {
                always {
                    junit 'reports/**/*.xml'
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                script {
                    echo "üì§ Pushing Docker image to Docker Hub..."
                    docker.withRegistry('https://index.docker.io/v1/', 'dockerhub-credentials') {
                        docker.image("${DOCKER_HUB_USER}/${IMAGE_NAME}:${IMAGE_TAG}").push()
                        docker.image("${DOCKER_HUB_USER}/${IMAGE_NAME}:${IMAGE_TAG}").push("latest")
                    }
                }
            }
        }

        stage('Deploy') {
            when {
                branch 'master'
            }
            steps {
                echo "üöÄ Deploying application..."
                sh './deploy.sh'
            }
        }
    }

    post {
        success {
            echo "‚úÖ Build and deployment successful!"
        }
        failure {
            echo "‚ùå Build failed!"
        }
        always {
            echo "üßπ Cleaning up workspace..."
            cleanWs()
        }
    }
}
