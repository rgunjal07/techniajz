pipeline {
    agent any

    environment {
        IMAGE_NAME = "myjenkins-blueocean:2.414.2"
        DOCKER_HUB_USER = "rgunjal"
    }

    options {
        timestamps()
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }

    stages {
        stage('Checkout') {
            steps {
                echo "📦 Checking out source code..."
                git branch: 'master',
                    url: 'https://github.com/rgunjal07/techniajz.git',
                    credentialsId: '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'   // 🔒 Jenkins credential ID you configured
            }
        }

        stage('Install Dependencies') {
            steps {
                echo "📦 Installing Node.js dependencies..."
                sh 'npm install'
            }
        }

        stage('Run Tests') {
            steps {
                echo "🧪 Running tests..."
                sh 'npm test || true'   // use || true to avoid breaking pipeline if tests not defined yet
            }
        }

        stage('Build Project') {
            steps {
                echo "🏗️ Building project..."
                sh 'npm run build'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo "🐳 Building Docker image..."
                    docker.build("${DOCKER_HUB_USER}/${IMAGE_NAME}:latest")
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                script {
                    echo "📤 Pushing Docker image to Docker Hub..."
                    docker.withRegistry('https://index.docker.io/v1/', 'dockerhub-credentials') {
                        docker.image("${DOCKER_HUB_USER}/${IMAGE_NAME}:latest").push()
                    }
                }
            }
        }

        stage('Deploy') {
            when {
                branch 'master'
            }
            steps {
                echo "🚀 Deploying application..."
                sh './deploy.sh'
            }
        }
    }

    post {
        success {
            echo "✅ Build and deployment successful!"
        }
        failure {
            echo "❌ Build failed!"
        }
        always {
            echo "🧹 Cleaning workspace..."
            cleanWs()
        }
    }
}
